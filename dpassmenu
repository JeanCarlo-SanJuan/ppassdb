#!/bin/sh
# A simple dmenu script for ppassdb

# This variable is defined to the name of the main script
# if you renamed the script, make sure it is the same as this variable
scriptName="ppassdb" 

# Checks for dependencies
command -v "$scriptName" > /dev/null || scriptName="./$scriptName"
command -v "$scriptName" > /dev/null ||
{ notify-send "The ${scriptName##*/} script could not be found" && exit 127 ; }
command -v dmenu > /dev/null || { notify-send "dmenu is not installed" && exit 127 ; }

# Gets the full path of the script
scriptName=$(which "$scriptName")

# Exit the script if dmenu is already running
pgrep -x dmenu && exit 1

# Exit the script if it does not found any encrypted files
"$scriptName" -Ln > /dev/null || exit 1

# Gets the path of the encrypted files
ppassdbHOME="$("$scriptName" -P)"

# Help Page
helpPage() {
echo "A simple dmenu script for ppassdb

Usage: ${0##*/} [options]

Options:
--help		To show this help message
--otp		Generate an OTP code instead of the
		encrypted text. All files without the
		.otp at the end are hidden unless
		if --show-all is specified.
--show-all	Show all files even if otp is specified.
--sort		Sort all files and folders together

For full documentation, refer to the README.md file at
https://github.com/jamez2128/ppassdb/blob/master/README.md"
}

# Parses all the arguments
while [ "$1" ] ; do
	case $1 in
	--otp) convertToOtpCode="-o" ; shift ;;
	--sort) sortOption=" " ; shift ;;
	--show-all) showAllOption=" " ; shift ;;
	--help) helpPage ; exit ;;
	esac
done

# Stops the loop until it finds a file
unset prompt
# If the directory is empty, it will exit the script
prompt="$ppassdbHOME"
while [ -d "$prompt" ] ; do
	cd "$prompt" || { echo "Directory doesn't exist" ;  exit 2 ; }
	prompt=$(pwd)
	{ [ -n "$convertToOtpCode" ] && [ -z "$showAllOption" ] ; } && findName="*.otp" || findName="*"
	unset removeDefault
	unset topOption
	if [ "$(pwd)" = "$ppassdbHOME" ]  ; then
		[ -d "default" ] && removeDefault="/default/ d"
		topOption="default/"
	else topOption=".."
	fi
	findFormat=$(cat << EOF
$(
find . -maxdepth 1 -type d | sed "1d; s/.*\///g; s/.*$/&\//g; $removeDefault"
find . -maxdepth 1 -name "$findName" ! -type d | sed "s/.*\///g"
)
EOF
)
	[ -n "$sortOption" ] && findFormat=$(echo "$findFormat" | sort)
	dmenuFormat=$(cat << EOF
$(
echo "$topOption"
echo "$findFormat"
)
EOF
)
	prompt="$(pwd)/$(printf "%s" "$dmenuFormat" | dmenu -p "${prompt#"$ppassdbHOME"}")" || exit 1
done

# Exit the script if it is not a file
[ ! -f "$prompt" ] && exit 1

# The decryption part
PPASSDB_HOME="$(pwd)" "$scriptName" -Dcn $convertToOtpCode -i "." -f "${prompt##*/}" || 
{ notify-send "Decryption failed" ; exit 1 ; }
