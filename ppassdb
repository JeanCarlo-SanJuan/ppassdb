#!/bin/sh

#===========================Configurations=================================#

clearClipboardTime=15
deleteJavaScriptTime=30
dirName="${0##*/}"

## Number of characters to number randomly generate
defaultNumberOfChars=16

## What type of characters to randomly generate
## [:graph:] - All printable characters, except whitespace
## [:alnum:] - All letters and numbers
## [:alpha:] - Letters only
## [:lower:] - Capital letters only
## [:upper:] - Small letters only
## [:digit:] - Numbers only
## For more options, refer to the tr manual
defaultTypeOfChars="[:graph:]"

##Uncomment to override the script's home directory
#PPASSDB_HOME="./.${0##*/}" 

## Uncomment to ask the password everytime after previous encryption
#askPassEverytime="gpg-connect-agent <<< RELOADAGENT"

#==========================================================================#

usage() { echo "Usage: ${0##*/} <operation> [options] <filename>" ; }

noOperation() { usage ; echo "Type \"${0##*/} --help\" for more info" ; }

help() {
	usage
	echo "
Operations:
-h, --help	To shows this help message.
-E		For adding and encrypting text files.
-D		For decrypting text file.
-L		Lists all the added encrypted text files. If -i
		is not specified, it will list all encrypted files
		from all groups.
-P		Outputs the path to where all the encrypted files
		will be stored.

Options:
-n	Pushes feedback messages to notifications (Only works on Linux)

Specific for -E only:
-g	Auto generates a random string and encrypts it.
-a	Specify the number of characters to randomly generate.
-t	Specify the type of characters to randomly generate.
	[:graph:] - All printable characters, except whitespace
	[:alnum:] - All letters and numbers
	[:alpha:] - Letters only
	[:lower:] - Capital letters only
	[:upper:] - Small letters only 
	[:digit:] - Numbers only
	For more options, refer to the tr manual
-r	Encrypts it with a existing user ID name made with a key pair.
	Without this option, it will use symetric encryption instead.
-m	Encrypts a multi-line text instead of a single line.

Specific to both -D and -E:
-d	This option will not attempt to copy to clipboard.
-c	Clears the clipboard after a period of time.
-f	This will be the input file name. \"/\" are not allowed in this 
	option and will be replaced with \"_\" if present.
-i	An identifier to group encrypted files. This is optional and if 
	this option is not called, it will use the default folder.
-s	Shows the text. This will return a successful exit status even if 
	the clipboard failed.
-j	Puts text to the generated html to copy it from the web browser.
-k	Forgets password after an operation was performed

Examples:
Lists all encrypted file:
${0##*/} -L

Encrypt a text:
${0##*/} -E -i \"username\" -f \"website.pass\" 

Decrypts the password and put it into the system clipboard and clears for a 
period of time:
${0##*/} -Dc -i \"username\" -f \"website.pass\"

For full documentation, refer to the README.md file at
https://github.com/jamez2128/ppassdb/blob/master/README.md"
}

checkDependecies() {
	{ command -v gpg2 > /dev/null && gnupg="gpg2" ; } ||
	{ command -v gpg > /dev/null && gnupg="gpg" ; } ||
	{ echo "gnupg is not installed" && exit 127 ; }
	[ -n "$convertToOtpCode" ] && ! command -v oathtool > /dev/null && { echo "oathtool is not installed. It is required to generate OTP codes." ; exit 1 ; }
}

searchHome() {
	androidPath="/storage/emulated/0"
	windowsPath="$APPDATA"
	gnuLinuxPath="$HOME/.local/share"
	macPath="$HOME/Library/Application Support"
	xdgPath="$XDG_DATA_HOME"
	
	if [ -d "$androidPath/$dirName"  ] ; then
		[ ! -w "$androidPath" ] && echo "You don't have write permissions in Termux" && exit 1
		PPASSDB_HOME="$androidPath/$dirName"
	elif [ -d "$windowsPath/$dirName" ] ; then
		PPASSDB_HOME="$windowsPath/$dirName"
	elif [ -d "$macPath/$dirName" ] ; then PPASSDB_HOME="$macPath/$dirName"
	elif [ -d "$HOME/.$dirName" ] ; then PPASSDB_HOME="$HOME/.$dirName"
	elif [ -z "$XDG_DATA_HOME" ] && [ -d "$gnuLinuxPath/$dirName" ]
	then PPASSDB_HOME="$gnuLinuxPath/$dirName"
	elif [ -d "$xdgPath/$dirName" ] ; then PPASSDB_HOME="$xdgPath/$dirName"
	else defineHome
	fi
}

defineHome() {
	if [ -d "$androidPath" ] ; then PPASSDB_HOME="$androidPath/$dirName"
	elif [ -d "/c/Windows" ] ; then PPASSDB_HOME="$windowsPath/$dirName"
	elif [ -d "$macPath" ] ; then PPASSDB_HOME="$macPath/$dirName"
	elif [ -n "$XDG_DATA_HOME" ] ; then PPASSDB_HOME="$xdgPath/$dirName"
	elif [ -z "$XDG_DATA_HOME" ] && [ -d "$gnuLinuxPath" ] ; then
		PPASSDB_HOME="$gnuLinuxPath/$dirName"
	elif [ -z "$XDG_DATA_HOME" ] && [ ! -d "$gnuLinuxPath" ] ; then
		PPASSDB_HOME="$HOME/.$dirName"
	else PPASSDB_HOME="$(pwd)/.$dirName"
	fi
	mkdir -p "$PPASSDB_HOME"
}

changeDir() {
	cd "$PPASSDB_HOME" || { echo "ppassdb home doesn't exist" ;  exit 2 ; }
}

showPath() { changeDir && pwd && exit ; }

listdb() {
	checkArgs
	changeDir
	{ [ -d "$(pwd)/$iD" ] && cd "$iD" ; } || { echo "$iD does not exist" ; exit 1 ; }
	echo "${0##*/} Home Directory:"
	pwd
	{ [ "$(find ./ | wc -l)" -eq 1 ] && $message "There are no encrypted files added yet" && exit 1 ; } || 
	{ { command -v "tree" > /dev/null && tree -aR ; } || { printf "ID's: " && ls -AR ; } ; }
}

checkArgs() {
	[ -n "$iD" ] && iD="${iD#/}"
	[ "$operation" = "list" ] && return
	[ -z "$iD" ] && iD="default"
	[ -z "$fileName" ] && echo "No name was specified. Please use -f option" && exit 1
	fileName=$(echo "$fileName" | tr "\/" "_" )
	inputFile="$PPASSDB_HOME/$iD/$fileName"
	[ "$operation" = "encrypt" ] && [ ! -d "$iD" ] && mkdir -p "$PPASSDB_HOME/$iD"
	[ "$operation" = "decrypt" ] && [ ! -e "$inputFile" ] && { echo "There is no input file" && exit 1 ; }
}

checkOptions() {
	[ -z "$gpgEncryptOptions" ] && gpgEncryptOptions="-c --cipher-algo AES256"
	[ -n "$unknownOption" ] && exit 1
	[ "$numOfOperations" -gt 1 ] && echo "Only one operation can be used at a time" && exit 1
	[ -z "$typeOfChars" ] && typeOfChars="$defaultTypeOfChars"
	{ [ -z "$numberOfChars" ] || printf "%i" "$numberOfChars" | grep "[A-Za-z\W\S_]" || [ "$numberOfChars" -le 0 ] ; } && numberOfChars=$defaultNumberOfChars
	[ -z "$message" ] && message="echo"
	[ -z "$askPassEverytime" ] # To get rid of that error in shellcheck but I still need this specific error so yeah

}

checkOS() {
	{ [ -d "/c/Windows" ] && oS="Windows" ; } || 
	{
		case "$(uname)" in
		*Linux) oS=$(uname -o) ;; 
		*) oS=$(uname) ;; 
		esac
	}
}

#A workaround if the script failed to take care of the clipboard
#Good Alternative if you don't wanna use the -s option
makeJavaScript() {
	escapeText=$(printf "%s" "$textToCopy" | sed 's/[\\`]/\\&/g')
	javaScriptPath=$(mktemp -u).html
	fileNameOnly=${javaScriptPath##*/}
	if [ "$oS" = "Android" ] && [ -w "/storage/emulated/0" ] ; then
		javaScriptPath="/storage/emulated/0/$fileNameOnly}"
	elif [ "$oS" = "Android" ] ; then
		unset javaScriptPath
		echo "You don't have write permissions in Termux" 
		[ -z "$showTextOption" ] && exit 1
	fi
	[ -n "$javaScriptPath" ] && 
	{
		cat << EOF
<html>
	<head>
	<title> $fileName | $iD | ${0#./} </title>
	<script>
		function copyToClipboard() { 
			navigator.clipboard.writeText(\`$escapeText\`); 
		}
	</script>
</head>
<body>
	<p> Click <button onclick=copyToClipboard()> 
		Copy </button> to put decrypted text to Clipboard 
	</p>
</body>
</html>
EOF
	} > "$javaScriptPath"
	[ -n "$javaScriptPath" ] &&
	{
		case "$oS" in
		"Windows") start "$javaScriptPath" ;;
		"GNU/Linux") command -v xdg-open > /dev/null && xdg-open "$javaScriptPath" > /dev/null 2>&1 ;;
		*) command -v open > /dev/null && open "$javaScriptPath" > /dev/null 2>&1 ;;
		esac
		echo "Your decrypted file is in file://$javaScriptPath"
		[ "$oS" = "Android" ] && echo "It will be in the your Internal Storage"
		echo "This file will be deleted in $deleteJavaScriptTime seconds"
		sleep $deleteJavaScriptTime && rm "$javaScriptPath" &
	}
}

showText() { echo "$textToCopy" ; }

clearClipboard() {
	[ -n "$clipboard" ] && $message "Clearing the clipboard in $clearClipboardTime seconds"
	sleep $clearClipboardTime && head /dev/null | $clipboard &
}

copyToClipboard() {
# Clipboards by OS'
	case $oS in
	"Windows") clipboard="clip.exe" ;;	
	"Android") command -v "termux-clipboard-set" > /dev/null && clipboard="termux-clipboard-set" ;;	
	*)
		{ [ -n "$WAYLAND_DISPLAY" ] && command -v wl-copy > /dev/null && clipboard="wl-copy" ; } ||
		{ [ -n "$DISPLAY" ] && command -v xclip > /dev/null && clipboard="xclip -selection clipboard" ; } ||
		{ command -v pbcopy > /dev/null && clipboard="pbcopy" ; }
		;;
	esac
	[ -n "$clipboard" ] && { printf "%s" "$textToCopy" | $clipboard && $message "Copied to Clipboard sucessfully" ; }
	$clearClipOption	
	[ -z "$clipboard" ] && $message "Could not find any clipboards" && [ -z "$showTextOption" ] && [ -z "$javaScriptOption" ] && exit 127
}

generateRandomText() { LC_CTYPE=C ; textToEncrypt=$(tr -dc "$typeOfChars" < /dev/urandom 2>&1 | head -c "$numberOfChars") ; }

oneLinerText() {
	stty -echo
	printf "Enter text to encrypt: " && read -r textToEncrypt ; echo
	printf "Enter the same text again: " && read -r confirmText ; echo	
	stty echo
	[ "$textToEncrypt" = "$confirmText" ] || { echo "Texts do not match" && exit 1 ; }
}

multiLinerText() {
	echo "Type or paste the text you want to encrypt
Press Ctrl+D when done:"
	textToEncrypt=$(cat)
}

encryption() {
	checkDependecies
	checkArgs
	if [ -n "$generateRandomTextOption" ]; then $generateRandomTextOption
	else
		{ [ -n "$multiLineOption" ] && multiLinerText ; } || oneLinerText
	fi
	$askPassEverytime
	# shellcheck disable=SC2086
	printf "%s" "$textToEncrypt" | $gnupg $1 -o "$inputFile" || exit 1
	[ -n "$forgetImmediatelyOption" ] && printf "RELOADAGENT" | gpg-connect-agent
	textToCopy="$textToEncrypt"
	[ -z "$dontCopyOption" ] && [ -n "$generateRandomTextOption" ] && [ -z "$javaScriptOption" ] && copyToClipboard
	$javaScriptOption
	$showTextOption
}

otpCode() {

	case $1 in
	otpauth://*) otpType=${1#*//} otpType=${otpType%%/*} ;;
	*) echo "Not a valid OTP auth URI" ; exit 1 ;;
	esac

	[ "$otpType"  = "hotp" ] && echo "Only TOTP URL's are supported at this time." && exit 1
	
	case $1 in
	*secret=*) otpSecret=${1#*secret=} otpSecret=${otpSecret%%&*} ;;
	*) echo "Invalid URI. No secret is provided" ; exit 1 ;;
	esac
	
	case $1 in 
	*algorithm=*) otpAlgorithm=${1#*algorithm=} otpAlgorithm=${otpAlgorithm%%&*} ;;
	*) otpAlgorithm="SHA1" ;;
	esac
	
	case $1 in 
	*digits=*) otpDigits=${1#*digits=} otpDigits=${otpDigits%%&*} ;;
	*) otpDigits=6 ;;
	esac
	
	case $1 in
	*period=*) otpPeriod=${1#*period=} otpPeriod=${otpPeriod%%&*} ;;
	*) otpPeriod=30  ;;
	esac

	oathtool -b --$otpType=$otpAlgorithm --digits=$otpDigits --time-step-size=$otpPeriod "$otpSecret"
}

decryption() {
	checkDependecies
	checkArgs
	$askPassEverytime
	textToCopy=$($gnupg -d "$inputFile") || exit 1
	[ -n "$convertToOtpCode" ] && textToCopy=$(otpCode "$textToCopy")
	[ -n "$forgetImmediatelyOption" ] && printf "RELOADAGENT" | gpg-connect-agent
	[ -z "$dontCopyOption" ] && [ -z "$javaScriptOption" ] && copyToClipboard
	$javaScriptOption 
	$showTextOption
}

# Start of the script
[ $# -eq 0 ] && noOperation && exit
echo "$*" | tr " " "\n" | grep -q \\--help > /dev/null && help && exit  

[ -n "$PPASSDB_HOME" ] && [ ! -d "$PPASSDB_HOME" ] && mkdir -p "$PPASSDB_HOME"
[ -z "$PPASSDB_HOME" ] && searchHome
gpgEncryptOptions="-c --cipher-algo AES256"

numOfOperations=0
OPTIND=1
checkOS
while getopts ":hEDLPcsji:f:gnt:a:r:dmko" OPTION; do
	case $OPTION in
	h) help ; exit ;;
	D) numOfOperations=$((numOfOperations+1)) operation=decrypt ;;
	E) numOfOperations=$((numOfOperations+1)) operation=encrypt ;;
	L) numOfOperations=$((numOfOperations+1)) operation=list ;;
	o) convertToOtpCode=" " ;;
	P) numOfOperations=$((numOfOperations+1)) operation=path ;;
	d) dontCopyOption=" " ;;
	c) clearClipOption='clearClipboard' ;;
	s) showTextOption='showText' ;;
	j) javaScriptOption='makeJavaScript' ;;
	i) iD="$OPTARG" ;;
	f) fileName="$OPTARG" ;;
	g) generateRandomTextOption='generateRandomText' ;;
	n) command -v notify-send > /dev/null && message="notify-send" ;;
	t) typeOfChars="$OPTARG" ;;
	a) numberOfChars="$OPTARG" ;;
	r) gpgEncryptOptions="-e -r $OPTARG" ;;
	m) multiLineOption=" " ;;
	k) forgetImmediatelyOption=" " ;;
	*) unknownOption=" " ; echo "-$OPTARG is an unknown option" ;;
	esac
done
checkOptions

case "$operation" in
decrypt) decryption ;;
encrypt) encryption "$gpgEncryptOptions" ;;
list) listdb ;;
path) showPath ;;
*) echo "No operation was specified" ; noOperation ;;
esac
