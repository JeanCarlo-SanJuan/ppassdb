#!/bin/sh

#===========================Configurations=================================#

clearClipboardTime=15
deleteJavaScriptTime=30
dirName="${0##*/}"
##Uncomment to override the script's home directory
#PPASSDB_HOME="." 

#==========================================================================#

usage() { echo "Usage: ${0##*/} <operation> [options] <filename>" ; }

noOperation() { usage "$@" ; echo "Type \"${0##*/} --help\" for more info" ; }

help() {
	usage "$@"
	echo "
Operations:
-h, --help	To shows this help message
-E		For adding and encryting text files.
-D 		For decrypting text file.
-L		Lists all the added encrypted text files.

Options:
Specific for -E only:
-g	 Auto generates a random string and encrypts it.

Specific to both -D and -E:
-c	Clears the clipboard after a period of time.
-f	This will be the input file name. \"/\" are not allowed in this 
	option and will be replaced with \"_\" if present.
-i	An identifier to group encrypted files. This is optional and if 
	this option is not called, it will use the default folder.
-s	Shows the text. This will return a successful exit status even if 
	the clipboard failed.
-j	Puts text to the generated html to copy it from the web browser.
-n	Pushes feedback messages to notifications (Only works on Linux)

Examples:
Lists all encrypted file
${0##*/} -L

Encrypt a text
${0##*/} -E -i \"username\" -f \"website.pass\" 

Decrypts the password and put it into the system clipboard and clears for a 
period of time:
${0##*/} -Dc -i \"username\" -f \"website.pass\"

For full documentation, Refer to the README.md file at
https://github.com/jamez2128/ppassdb/blob/master/README.md
	"
}

checkDependecies() { ! command -v gpg > /dev/null 2>&1 && echo "gnupg is not installed" && exit 127 ; }

searchHome() {
	androidPath="/storage/emulated/0"
	windowsPath="$APPDATA"
	gnuLinuxPath="$HOME/.local/share"
	macPath="$HOME/Library/Application Support"
	xdgPath="$XDG_DATA_HOME"
	
	if [ -d "$androidPath/$dirName"  ] ; then
		[ ! -w "$androidPath" ] && echo "You don't have write permissions in Termux" && exit 1
		PPASSDB_HOME="$androidPath/$dirName"
	elif [ -d "$windowsPath/$dirName" ] ; then
		PPASSDB_HOME="$windowsPath/$dirName"
	elif [ -d "$macPath/$dirName" ] ; then PPASSDB_HOME="$macPath/$dirName"
	elif [ -d "$HOME/.$dirName" ] ; then PPASSDB_HOME="$HOME/.$dirName"
	elif [ -z "$XDG_DATA_HOME" ] && [ -d "$gnuLinuxPath/$dirName" ]
	then PPASSDB_HOME="$gnuLinuxPath/$dirName"
	elif [ -d "$xdgPath/$dirName" ] ; then PPASSDB_HOME="$xdgPath/$dirName"
	else defineHome "$@"
	fi
}

defineHome() {
	if [ -d "$androidPath" ] ; then PPASSDB_HOME="$androidPath/$dirName"
	elif [ -d "/c/Windows" ] ; then PPASSDB_HOME="$windowsPath/$dirName"
	elif [ -d "$macPath" ] ; then PPASSDB_HOME="$macPath/$dirName"
	elif [ -n "$XDG_DATA_HOME" ] ; then PPASSDB_HOME="$xdgPath/$dirName"
	elif [ -z "$XDG_DATA_HOME" ] && [ -d "$gnuLinuxPath" ] ; then
		PPASSDB_HOME="$gnuLinuxPath/$dirName"
	elif [ -z "$XDG_DATA_HOME" ] && [ ! -d "$gnuLinuxPath" ] ; then
		PPASSDB_HOME="$HOME/.$dirName"
	else PPASSDB_HOME="$(pwd)/$dirName"
	fi
	mkdir -p "$PPASSDB_HOME"
}

listdb() {
	cd "$PPASSDB_HOME" || { echo "ppassdb home doesn't exist" && exit 2 ; } 
	echo "${0##*/} Home Directory:"
	pwd
	{ [ "$(find ./ | wc -l)" -eq 1 ] && $message "There are no encrypted files added yet" && exit 1 ; } || 
	{ { command -v "tree" > /dev/null 2>&1 && tree -aR ; } || { printf "ID's: " && ls -AR ; } ; }
}

checkArgs() {
	[ -n "$iD" ] && iD=$(echo "$iD" | sed "s/^\/*//g")
	[ -z "$iD" ] && iD="default"
	[ -z "$fileName" ] && echo "No name was specified. Please use -f option" && exit 1
	fileName=$(echo "$fileName" | sed "s/\//_/g" )
	inputFile="$PPASSDB_HOME/$iD/$fileName"
	[ "$operation" = "encrypt" ] && [ ! -d "$iD" ] && mkdir -p "$PPASSDB_HOME/$iD"
	[ "$operation" = "decrypt" ] && [ ! -e "$inputFile" ] && { echo "There is no input file" && exit 1 ; }
}

#A workaround if the script failed to take care of the clipboard
#Good Alternative if you don't wanna use the -s option
makeJavaScript() {
	escapeText=$(echo "$textToCopy" | sed 's/[\\\"]/\\&/g')
	javaScriptPath=$(mktemp -u).html
	fileNameOnly=${javaScriptPath##*/}
	if [ "$oS" = "Android" ] && [ -w "/storage/emulated/0" ] ; then
		javaScriptPath="/storage/emulated/0/$fileNameOnly}"
	elif [ "$oS" = "Android" ] ; then
		unset javaScriptPath
		echo "You don't have write permissions in Termux" 
		[ -z "$showTextOption" ] && { cleanUp "$@" ; exit 1 ; }
	fi
	[ -n "$javaScriptPath" ] && 
	{
		cat << EOF
<html>
	<head>
	<title> $fileName | $iD | ${0#./} </title>
	<script>
		function copyToClipboard() { 
			navigator.clipboard.writeText("$escapeText"); 
		}
	</script>
</head>
<body>
	<p> Click <button onclick=copyToClipboard()> 
		Copy </button> to put decrypted text to Clipboard 
	</p>
</body>
</html>
EOF
	} > "$javaScriptPath"
	[ -n "$javaScriptPath" ] &&
	{
		case "$oS" in
			"Windows") start "$javaScriptPath" ;;
			"GNU/Linux") command -v xdg-open > /dev/null 2>&1 && xdg-open "$javaScriptPath" > /dev/null 2>&1 ;;
			*) command -v open > /dev/null 2>&1 && open "$javaScriptPath" ;;
		esac
		echo "Your decrypted file is in file://$javaScriptPath"
		[ "$oS" = "Android" ] && 
		echo "It will be in the your Internal Storage"
		echo "This file will be deleted in $deleteJavaScriptTime seconds"
		sleep $deleteJavaScriptTime && rm "$javaScriptPath" &
	}
}

cleanUp() { [ -e "$decryptedFile" ] && rm "$decryptedFile" ; }

showText() { echo &&  echo "$textToCopy" && echo ; }

clearClipboard() {
	[ -n "$clipboard" ] && 
	{
		$message "Clearing the clipboard in $clearClipboardTime seconds"
		sleep $clearClipboardTime && head /dev/null | $clipboard &
	}
}

copyToClipboard() {
# Clipboards by OS'
	case $oS in
		"Windows") clipboard="clip.exe" ;;	
		"Android") command -v "termux-clipboard-set" > /dev/null 2>&1 && clipboard="termux-clipboard-set" ;;	
		*)
			{ [ -n "$WAYLAND_DISPLAY" ] && command -v wl-copy > /dev/null 2>&1 && clipboard="wl-copy" ; } ||
			{ command -v xclip > /dev/null 2>&1 && clipboard="xclip -selection clipboard" ; } ||
			{ command -v pbcopy > /dev/null 2>&1 && clipboard="pbcopy" ; }
		;;
	esac

	[ -n "$clipboard" ] && { echo "$textToCopy" | tr -d "\n" | $clipboard && $message "Copied to Clipboard sucessfully" ; }

	$clearClipOption
	
	[ -z "$clipboard" ] &&
	$message "Could not find any clipboards" && 
	[ -z "$showTextOption" ] && [ -z "$javaScriptOption" ] && { cleanUp "$@" ; exit 127 ; }
}

generateRandomText() { LC_CTYPE=C ; textToEncrypt=$(tr -dc "[:graph:]" < /dev/urandom | fold -w 50 | head -n 1) ; }

encryption() {
	checkDependecies "$@"
	checkArgs "$@"
	if [ -n "$generateRandomTextOption" ]; then $generateRandomTextOption
	else
		stty -echo
		printf "Enter text to encrypt: " && read -r textToEncrypt ; echo
		printf "Enter the same text again: " && read -r confirmText ; echo	
		stty echo
		[ "$textToEncrypt" = "$confirmText" ] || { echo "Texts do not match" && exit 1 ; }
	fi
	echo "$textToEncrypt" | tr -d "\n" |
	gpg -c --no-symkey-cache --cipher-algo AES256 -o "$inputFile" || exit 1
	textToCopy="$textToEncrypt"
	[ -n "$generateRandomTextOption" ] && [ -z "$javaScriptOption" ] && copyToClipboard "$@"
	$javaScriptOption
	$showTextOption
}

decryption() {
	checkDependecies "$@"
	checkArgs "$@"
	decryptedFile=$(mktemp -u)
	gpg -d --no-symkey-cache -o "$decryptedFile" "$inputFile" || exit 1
	textToCopy=$(head -n 1 "$decryptedFile")
	[ -z "$javaScriptOption" ] && copyToClipboard "$@"
	$javaScriptOption 
	$showTextOption
	cleanUp "$@"
}

#Start of the script
[ $# -eq 0 ] && noOperation "$@" && exit
echo "$*" | sed "s/ /\\n/g" | grep \\--help > /dev/null 2>&1 && help "$@" &&
exit  

[ -n "$PPASSDB_HOME" ] && PPASSDB_HOME="$PPASSDB_HOME/$dirName"
[ -n "$PPASSDB_HOME" ] && [ ! -d "$PPASSDB_HOME" ] && mkdir -p "$PPASSDB_HOME"
[ -z "$PPASSDB_HOME" ] && searchHome "$@"

#OS Detection
{ [ -d "/c/Windows" ] && oS="Windows" ; } || 
{
	case "$(uname)" in
		*Linux) oS=$(uname -o) ;; 
		*) oS=$(uname) ;; 
	esac
}

numOfOperations=0
OPTIND=1
while getopts ":hEDLcsji:f:gn" OPTION; do
	case $OPTION in
		h) help "$@" ; exit ;;
		D) numOfOperations=$((numOfOperations+1)) ; operation=decrypt ;;
		E) numOfOperations=$((numOfOperations+1)) ; operation=encrypt ;;
		L) numOfOperations=$((numOfOperations+1)) ; operation=list ;;
		c) clearClipOption='clearClipboard "$@"' ;;
		s) showTextOption='showText "$@"' ;;
		j) javaScriptOption='makeJavaScript "$@"' ;;
		i) iD="$OPTARG" ;;
		f) fileName="$OPTARG" ;;
		g) generateRandomTextOption='generateRandomText "$@"' ;;
		n) command -v notify-send > /dev/null && message="notify-send" ;;
		*) unknownOption="1" ; echo "-$OPTARG is an unknown option" ;;
	esac
done
[ -z "$message" ] && message="echo"
[ -n "$unknownOption" ] && exit 1
[ $numOfOperations -gt 1 ] && 
echo "Only one operation can be used at a time" && exit 1

case "$operation" in
	decrypt) decryption "$@" ;;
	encrypt) encryption "$@" ;;
	list) listdb "$@" ;;
	*) echo "No operation was specified" ; noOperation "$@" ;;
esac
