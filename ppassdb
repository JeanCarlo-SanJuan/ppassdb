#!/bin/sh

#============Configurations============#

clearClipboardTime=15
deleteJavaScriptTime=30
dirName="ppassdb"
#PPASSDB_HOME="./$dirName" #Uncomment to override the script's home directory

#======================================#

usage(){
 	echo "Usage: $0 [operation] [options] [input_file]"
}

noOperation(){
	usage "$@"
	echo "Type \"$0 --help\" for more"
}

help(){
	usage "$@"
	echo "
Operations:
-h, --help To shows this help message
-E	   For adding and encryting text files.
-D	   For decrypting text file.
-L	   Lists all the added encrypted text files.

Options:
Specific for -E only:
-g Auto generates a random string and encrypts it.

Specific to both -D and -E:
-i An identifier to group encrypted files. This is optional and if this option is not called, it will use the default folder.
-n This will be the input file name. \"/\" are not allowed in this option and will be replaced with \"_\" if present.
-c Clears the clipboard after a period of time.
-s Shows the text. This will return a successful exit status even if the clipboard failed.
-j Puts text to the generated html to copy it from the browser.

Examples:
Lists all encrypted file
$0 -L

Encrypt a text
$0 -E -i \"username\" -n \"website.pass\" 

Decrypts the password and put it into the system clipboard and clears for a period of time:
$0 -Dc -i \"username\" -n \"website.pass\"

Made by jamez2128
	"
}

searchHome(){
if [ -d "/storage/emulated/0/$dirName"  ] ; then
	[ -w "/storage/emulated/0" ] && PPASSDB_HOME="/storage/emulated/0/$dirName" ||
	{ echo "You don't have write permissions in Termux" && exit 1 ; }
elif [ -d "$APPDATA/$dirName" ] ; then 
	PPASSDB_HOME="$APPDATA/$dirName"
elif [ -d "$HOME/.$dirName" ] ; then
	PPASSDB_HOME="$HOME/.$dirName"
elif [ -z "$XDG_DATA_HOME" ] && [ -d "$HOME/.local/share/$dirName" ] ; then
	PPASSDB_HOME="$HOME/.local/share/$dirName"
elif [ -d "$XDG_DATA_HOME/$dirName" ] ; then
	PPASSDB_HOME="$XDG_DATA_HOME/$dirName"
else 
	defineHome "$@"
fi
}

defineHome(){
if [ -d "/storage/emulated/0" ] ; then
	[ -w "/storage/emulated/0" ] && PPASSDB_HOME="/storage/emulated/0/ppassdb" ||
	{ echo "You don't have write permissions in Termux" && exit 1 ; }
elif [ -n "$APPDATA" ] && [ -d "/c/Windows" ] ; then 
	PPASSDB_HOME="$APPDATA/"
elif [ -n "$XDG_DATA_HOME" ] ; then
	PPASSDB_HOME="$XDG_DATA_HOME/$dirName"
elif [ -z "$XDG_DATA_HOME" ] && [ -d "$HOME/.local/share" ] ; then
	XDG_DATA_HOME="$HOME/.local/share/$dirName"
elif [ -z "$XDG_DATA_HOME" ] && [ ! -d "$HOME/.local/share" ] ; then
	PPASSDB_HOME="$HOME/.$dirName"
else
	PPASSDB_HOME="$(pwd)/$dirName"
fi
}

listdb(){
	cd "$PPASSDB_HOME" || { echo "ppassdb home doesn't exist" && exit 1 ; } 
	echo "$0 Home Directory: $(pwd)"
	{ [ "$(find ./ | wc -l)" -eq 1 ] && echo "There are no encrypted files added yet" ; } ||
	{ printf "ID's: " && ls -AR | sed "s/^\.\///g" ; }
}

checkArgs(){
	[ -n "$iD" ] && iD=$(echo "$iD" | sed "s/^\/*//g")
	[ -z "$iD" ] && iD="default"
	[ -z "$fileName" ] && echo "No name was specified. Please use -n option" && exit 1
	fileName=$(echo "$fileName" | sed "s/\//_/g" )
	inputFile="$PPASSDB_HOME/$iD/$fileName"
	[ "$operation" = "encrypt" ] && [ ! -d "$iD" ] && mkdir -p "$PPASSDB_HOME/$iD"
	[ "$operation" = "decrypt" ] && [ ! -e "$inputFile" ] && { echo "There is no input file" && exit 1 ; }
}

#A workaround if the script failed to take care of the clipboard
#Good Alternative if you don't wanna use the -s option
makeJavaScript() {
	escapeText=$(sed 's/[\\\"]/\\&/g' "$tmpFile")
	javaScriptPath=$(mktemp -u).html
	fileNameOnly=${javaScriptPath##*/}
	if [ "$oS" = "Android" ] && [ -w "/storage/emulated/0" ] ; then
		javaScriptPath="/storage/emulated/0/$fileNameOnly}"
	elif [ "$oS" = "Android" ] ; then
		javaScriptPath=""
		echo "You don't have write permissions in Termux" 
		[ -z "$showTextOption" ] && cleanUp "$@" && exit 1
	fi
	[ -n "$javaScriptPath" ] && { cat << EOF
<html>
	<head>
	<title> Copy to system clipboard </title>
	<script>
		function copyToClipboard() { navigator.clipboard.writeText("$escapeText"); }
	</script>
</head>
<body>
	<p> Click <button onclick=copyToClipboard()> Copy </button> to put decrypted text to Clipboard </p>
</body>
</html>
EOF
	} > "$javaScriptPath"
	[ -n "$javaScriptPath" ] && {
	case "$oS" in
		"Windows") start "$javaScriptPath" ;;
		"GNU/Linux") command -v xdg-open > /dev/null 2>&1 && xdg-open "$javaScriptPath" > /dev/null 2>&1 ;;
		*) command -v open > /dev/null 2>&1 && open "$javaScriptPath" ;;
	esac
	echo "Your decrypted file is in file://$javaScriptPath"
	[ "$oS" = "Android" ] && echo "It will be in the your Internal Storage"
	echo "This file will be deleted in $deleteJavaScriptTime seconds"
	sleep $deleteJavaScriptTime && rm "$javaScriptPath" &
	}
}

cleanUp(){
	[ -e "$tmpFile" ] && rm "$tmpFile"
}

showText(){
	echo && head -n 1 "$tmpFile" && echo && echo
}

clearClipboard(){
	[ -n "$clipboard" ] && 
	echo "Clearing the clipboard in $clearClipboardTime seconds" &&
	sleep $clearClipboardTime && head /dev/null | $clipboard &
}

copyToClipboard(){
	# Clipboards by OS'
	case $oS in
		"Windows") clipboard="clip.exe" ;;	
		"Android") command -v "termux-clipboard-set" > /dev/null 2>&1 && clipboard="termux-clipboard-set" ;;	
		"GNU/Linux") 
			[ -n "$WAYLAND_DISPLAY" ] && 
			command -v wl-copy > /dev/null 2>&1 && clipboard="wl-copy" ||
			command -v xclip > /dev/null 2>&1 && clipboard="xclip -selection clipboard"
		;;	
		*) command -v pbcopy > /dev/null 2>&1 && clipboard="pbcopy" ;;	
	esac

	[ -n "$clipboard" ] && 
	head -n 1 "$tmpFile" | tr -d "\n" | $clipboard && 
	echo "Copied to Clipboard sucessfully"

	$clearClipOption

	[ -z "$clipboard" ] && echo "Could not find any clipboards" && 
	[ -z "$showTextOption" ] && 
	[ -z "$javaScriptOption" ] && 
	cleanUp "$@" && 
	exit 127
	
}

generateRandomText(){
	tr -dc "[:alnum:]" < /dev/urandom | fold -w 50 | head -n 1 > "$tmpFile"
	trap 'cleanUp "$@" && exit 130' INT
}

encryption(){
	checkArgs "$@"
	if [ -n "$generateRandomTextOption" ]; then
		$generateRandomTextOption
	else
		stty -echo
		printf "Enter text to encrypt: " && read -r textToEncrypt
		echo
		printf "Enter the same text again: " && read -r confirmText
		stty echo
		echo
		{ [ "$textToEncrypt" = "$confirmText" ] && echo "$textToEncrypt" | tr -d "\n"  > "$tmpFile" ; } || 
		{ echo "Texts do not match" && exit 1 ; }
	fi
	gpg -c --no-symkey-cache --cipher-algo AES256 -o "$inputFile" "$tmpFile" || exit 1
	[ -n "$generateRandomTextOption" ] && [ -z "$javaScriptOption" ] && copyToClipboard "$@"
	$javaScriptOption
	$showTextOption
}

decryption(){
	checkArgs "$@"
	gpg --no-symkey-cache --output "$tmpFile" "$inputFile" || exit 1
	[ -z "$javaScriptOption" ] && copyToClipboard "$@"
	$javaScriptOption 
	$showTextOption
}

#Start of the script
[ $# -eq 0 ] && noOperation "$@" && exit
echo "$*" | sed "s/ /\\n/g" | grep \\--help > /dev/null 2>&1 && help "$@" && exit	

#Checking for adequate dependencies
! command -v gpg > /dev/null 2>&1 && echo "gnupg is not installed" && exit 127;
[ -z "$PPASSDB_HOME" ] && searchHome "$@"
[ ! -d "$PPASSDB_HOME" ] && mkdir -p "$PPASSDB_HOME"

numOfOperations=0
OPTIND=1
while getopts ":hEDLcsji:n:g" OPTION; do
	case $OPTION in
		h) help "$@" ; exit ;;
		D) numOfOperations=$((numOfOperations+1)) ; operation=decrypt ;;
		E) numOfOperations=$((numOfOperations+1)) ; operation=encrypt ;;
		L) numOfOperations=$((numOfOperations+1)) ; operation=list ;;
		c) clearClipOption='clearClipboard "$@"' ;;
		s) showTextOption='showText "$@"' ;;
		j) javaScriptOption='makeJavaScript "$@"' ;;
		i) iD="$OPTARG" ;;
		n) fileName="$OPTARG" ;;
		g) generateRandomTextOption='generateRandomText "$@"' ;;
		*) unknownOption="1" ; echo "-$OPTARG is an unknown option" ;;
	esac
done

[ -n "$unknownOption" ] && exit 1
[ $numOfOperations -gt 1 ] && echo "Only one operation can be used at a time" && exit 1
tmpFile=$(mktemp -u)
[ -d "/c/Windows" ] && oS="Windows" || oS=$(uname -o || uname)
case "$operation" in
	decrypt) decryption "$@" ;;
	encrypt) encryption "$@" ;;
	list) listdb "$@" ;;
	*) echo "No operation was specified" ; noOperation "$@" ;;
esac

cleanUp "$@"
