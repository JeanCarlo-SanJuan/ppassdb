#!/bin/sh

#============Configurations============#

clearClipboardTime=15
deleteJavaScriptTime=30
#ppassdbHOME="./ppassdbHOME" #Uncomment to override the script's home directory

#======================================#

noOperation(){
 	echo "Usage: $0 [operations] [options] [input_file]"
	echo "Type \"$0 --help\" for more"
}

help(){
	echo "I'll do the documentaion later lol"
}

[ $# -eq 0 ] && noOperation "$@" && exit
echo "$*" | sed "s/ /\\n/g" | grep \\--help > /dev/null 2>&1 && help "$@" && exit	

#Checking for adequate dependencies
! command -v gpg > /dev/null 2>&1 && echo "gnupg is not installed" && exit 127;

defineHome(){
if [ -n "$APPDATA" ] && [ -d "/c/Windows" ] ; then 
	ppassdbHOME="$APPDATA/ppassdb"
elif [ -n "$XDG_DATA_HOME" ] ; then
	ppassdbHOME="$XDG_DATA_HOME/ppassdb"
elif [ -z "$XDG_DATA_HOME" ] && [ -d "$HOME/.local/share" ] ; then
	XDG_DATA_HOME="$HOME/.local/share"
elif [ -z "$XDG_DATA_HOME" ] && [ ! -d "$HOME/.local/share" ] ; then
	ppassdbHOME="$HOME/.ppassdb"
else
	ppassdbHOME="$(pwd)"
fi
}

listdb(){
	cd "$ppassdbHOME" || { echo "ppassdb home doesn't exist" && exit 1 ; } &&
	echo "$0 Home Directory: $(pwd)"
	{ [ "$(find ./ | wc -l)" -eq 1 ] && echo "There are no encrypted files added yet" ; } ||
	{ printf "ID's" && ls -AR ; }
}

checkArgs(){
	[ -z "$iD" ] && echo "No ID or user was specified. Please use -i option"
	[ -z "$fileName" ] && echo "No name was specified. Please use -n option"
	{ [ -z "$iD"  ] || [ -z "$fileName" ] ; } && exit 1
}

#A workaround if the script failed to take care of the clipboard
#Good Alternative if you don't wanna use the -s option
makeJavaScript() {
	doubleQuoteFriendly=$(sed 's/\\/\\\\/g;s/\"/\\"/g' "$tmpFile")
	javaScriptPath=$(mktemp -u).html
	fileNameOnly=${javaScriptPath##*/}
	OS=$(uname -o)
	if [ "$OS" = "Android" ] && [ -w "/storage/emulated/0" ] ; then
		javaScriptPath="/storage/emulated/0/${fileNameOnly#/tmp/}"
	elif [ "$OS" = "Android" ] ; then
	javaScriptPath=""
	echo "You don't have write permissions in Termux" 
	[ -z "$showTextOption" ] && cleanUp "$@" && exit 1
	fi
	[ -n "$javaScriptPath" ] && { cat << EOF
<html>
	<head>
	<title> Copy to system clipboard </title>
	<script>
		function copyToClipboard() { navigator.clipboard.writeText("$doubleQuoteFriendly"); }
	</script>
</head>
<body>
	<p> Click <button onclick=copyToClipboard()> Copy </button> to put decrypted text to Clipboard </p>
</body>
</html>
EOF
	} > "$javaScriptPath"
	[ -n "$javaScriptPath" ] && {
	[ ! "$OS" = "Android" ] && command -v xdg-open > /dev/null 2>&1 && xdg-open "$javaScriptPath" > /dev/null 2>&1
	[ -d "/c/Windows" ] && start "$javaScriptPath"
	echo "Your decrypted file is in file://$javaScriptPath"
	[ "$OS" = "Android" ] && echo "It will be in the your Internal Storage"
	echo "This file will be deleted in $deleteJavaScriptTime seconds"
	sleep $deleteJavaScriptTime && rm "$javaScriptPath" &
	}
}

cleanUp(){
	[ -e "$tmpFile" ] && rm "$tmpFile"
}

showText(){
	echo && head -n 1 "$tmpFile" && echo && echo
}

clearClipboard(){
	[ "$success" -eq 0 ] && [ -n "$clipboard" ] && 
	echo "Clearing the clipboard in $clearClipboardTime seconds" &&
	sleep $clearClipboardTime && head /dev/null | $clipboard &
}

copyToClipboard(){
	# Clipboards by OS'
	termuxClip="termux-clipboard-set"
	{ [ -n "$WAYLAND_DISPLAY" ] && command -v wl-copy > /dev/null 2>&1 && clipboard="wl-copy" || 
	command -v xclip > /dev/null 2>&1 && clipboard="xclip -selection clipboard" ; } || 
	{ command -v "$termuxClip" > /dev/null 2>&1 && clipboard="$termuxClip" ; } || 
	{ command -v pbcopy > /dev/null 2>&1 && clipboard="pbcopy" ; } ||
	{ [ -d "/c/Windows" ] && command -v clip.exe > /dev/null 2>&1 && clipboard="clip.exe" ; }

	head -n 1 "$tmpFile" | tr -d "\n" | $clipboard && echo "Copied to Clipboard sucessfully" && 
	[ -n "$clearClipOption" ] && $clearClipOption
	[ "$success" -eq 0 ] && [ -n "$showTextOption" ] && $showTextOption

	# If the script doesn't detect any clipboard programs
	[ -z "$clipboard" ] && echo "Could not find any clipboards" && 
	[ -z "$showTextOption" ] && [ -z "$javaScriptOption" ] && cleanUp "$@" && exit 127

}

generateRandomText(){
	tr -dc "[:alnum:]" < /dev/urandom | fold -w "${1:-32}" | head -n 1
}

encryption(){
	checkArgs "$@"
	[ ! -d "$iD" ] && mkdir -p "$ppassdbHOME/$iD"
	if [ -n "$generateRandomTextOption" ]; then
		$generateRandomTextOption
	else
		stty -echo
		printf "Enter text to encrypt: " && read -r textToEncrypt
		echo
		printf "Enter the same text again: " && read -r confirmText
		stty echo
		echo
		{ [ "$textToEncrypt" = "$confirmText" ] && echo "$textToEncrypt" | tr -d "\n"  > "$tmpFile" ; } || 
		{ echo "Texts do not match" && exit 1 ; }
	fi
	gpg -c --no-symkey-cache --cipher-algo AES256 -o "$ppassdbHOME/$iD/$fileName" "$tmpFile" ; success=$?
	[ -n "$generateRandomTextOption" ] && copyToClipboard "$@"
}

decryption(){
	checkArgs "$@"
	gpg --no-symkey-cache --output "$tmpFile" "$ppassdbHOME/$iD/$fileName" ; success=$?
	[ "$success" -eq 0 ] && { [ -n "$javaScriptOption" ] && $javaScriptOption || copyToClipboard "$@" ; }
}
numOfOperations=0
OPTIND=1

[ -z "$ppassdbHOME" ] && defineHome "$@"
[ ! -d "$ppassdbHOME" ] && mkdir -p "$ppassdbHOME"

while getopts ":hEDLcsji:n:g" OPTION; do
	case $OPTION in
		h) help "$@" ; exit ;;
		D) numOfOperations=$((numOfOperations+1)) ; operation=decrypt ;;
		E) numOfOperations=$((numOfOperations+1)) ; operation=encrypt ;;
		L) numOfOperations=$((numOfOperations+1)) ; operation=list ;;
		c) clearClipOption='clearClipboard "$@"' ;;
		s) showTextOption='showText "$@"' ;;
		j) javaScriptOption='makeJavaScript "$@"' ;;
		i) iD="$OPTARG" ;;
		n) fileName="$OPTARG" ;;
		g) generateRandomTextOption='generateRandomText "$@"' ;;
		*) unknownOption="1" ; echo "-$OPTARG is a unknown option" ;;
	esac
done

[ -n "$unknownOption" ] && exit 1
[ $numOfOperations -gt 1 ] && echo "Only one operation can be used at a time" && exit 1
tmpFile=$(mktemp -u)

case "$operation" in
	decrypt) decryption "$@" ;;
	encrypt) encryption "$@" ;;
	list) listdb "$@" ;;
	*) echo "No operation was specified" ; noOperation "$@" ;;
esac

cleanUp "$@"
